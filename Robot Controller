#include <iostream>
using namespace std;

int displayMenu();
int moveRight(int robotArray[], int currentPosition, int moveCount[], int storePosition[]);
int moveLeft(int robotArray[], int currentPosition, int moveCount[], int storePosition[]);
void display(int currentPosition);
int reboot(int robotArray[], int currentPosition, int moveCount[], int storePosition[]);
void showGrid(int robotArray[]);
int cancel(int robotArray[], int currentPosition, int moveCount[], int storePosition[]);

int main() {


	int robotArray[10];
	int storePosition[30];
	int moveCount[1] = { 0 };
	int currentPosition = 0;

	robotArray[currentPosition] = 1;
	storePosition[0] = 0;
	
	for (int i = 1; i < 10; i++) {
		robotArray[i] = 0;
	}

	for (int i = 1; i < 30; i++) {
		storePosition[i] = -1;
	}
	
	int choice = 0;

	do {
		choice = displayMenu();

		if (choice == 1) {
			currentPosition = moveRight(robotArray, currentPosition, moveCount, storePosition);
		}
		else if (choice == 2) {
			currentPosition = moveLeft(robotArray, currentPosition, moveCount, storePosition);
		}
		else if (choice == 3) {
			display(currentPosition);
		}
		else if (choice == 4) {
			currentPosition=reboot(robotArray, currentPosition, moveCount, storePosition);
		}
		else if (choice == 5) {
			showGrid(robotArray);
		}
		else if (choice == 6) {
			currentPosition=cancel(robotArray, currentPosition, moveCount, storePosition);
		}
		

	} while (choice != 7);


	return 0;
}

int displayMenu() {

	int choice = 0;
	cout << endl;
	cout << "Press 1: Move Right" << endl;
	cout << "Press 2: Move Left" << endl;
	cout << "Press 3: Display" << endl;
	cout << "Press 4: Reboot" << endl;
	cout << "Press 5: Show Grid" << endl;
	cout << "Press 6: Cancel" << endl;
	cout << "Press 7: Exit" << endl;
	cout << "Enter your choice: ";
	cin >> choice;
	if (choice == 1) {
		return 1;
	}
	else if (choice == 2) {
		return 2;
	}
	else if (choice == 3) {
		return 3;
	}
	else if (choice == 4) {
		return 4;
	}
	else if (choice == 5) {
		return 5;
	}
	else if (choice == 6) {
		return 6;
	}
	else if (choice == 7) {
		return 7;
	}
	else {
		cout << "\nInvalid input\n";
	}
	
	cout << endl;
	return choice;
}

int moveRight(int robotArray[], int currentPosition, int moveCount[], int storePosition[]) {

	int num = 0;
	int updatedPosition = 0;
	cout << "\nEnter number of cells to move right: ";
	cin >> num;

	if (num < 0 || num>9||(num+currentPosition)>9) {
		cout << "Invalid input\n";
	}
	else {
		robotArray[currentPosition] = 0;
		updatedPosition = num + currentPosition;
		robotArray[updatedPosition] = 1;
		moveCount[0] += 1;
		storePosition[moveCount[0]] = updatedPosition;
		return updatedPosition;
	}
	
}



int moveLeft(int robotArray[], int currentPosition, int moveCount[], int storePosition[]) {

	int num = 0;
	int updatedPosition = 0;
	cout << "\nEnter number of cells to move left: ";
	cin >> num;

	if (num < 0 || num>9 || (currentPosition-num) <0) {
		cout << "Invalid input\n";
	}
	else {
		robotArray[currentPosition] = 0;
		updatedPosition =  currentPosition-num;
		robotArray[updatedPosition] = 1;
		moveCount[0] += 1;
		storePosition[moveCount[0]] = updatedPosition;
		return updatedPosition;
	}

}



void display(int currentPosition) {

	cout << "\nRobot is currently at poistion: " << currentPosition << endl;
}


int reboot(int robotArray[], int currentPosition, int moveCount[], int storePosition[]) {

	robotArray[currentPosition] = 0;
	robotArray[0] = 1;
	currentPosition = 0;
	moveCount[0] = 0;

	for (int i = 1; i < 30; i++) {
		storePosition[i] = -1;
	}
	cout << "\nRobot rebooted\n";

	return currentPosition;

}

void showGrid(int robotArray[]) {
	cout << endl;
	for (int i = 0; i < 10; i++) {
		if (robotArray[i] == 1) {
			cout << "[R]";
		}
		else {
			cout << "[ ]";
		}
	}
	cout << endl;
}


int cancel(int robotArray[], int currentPosition, int moveCount[], int storePosition[]) {

	int num = 0;
	if (moveCount[0] == 0) {
		cout << "\nNo operations to cancel" << endl;
	}
	else {
		cout << "Enter number of operations to cancel :";
		cin >> num;

		if (num < 0 || num>9 || num > moveCount[0]) {
			cout << "Invalid input\n";
		}
		else {
			moveCount[0] -= num;
			robotArray[currentPosition] = 0;
			int newIndex = storePosition[moveCount[0]];
			robotArray[newIndex] = 1;
			currentPosition = newIndex;

			for(int a = newIndex + 1; storePosition[a] != -1; a++){
				storePosition[a] = -1;
			}
			return currentPosition;
		}
	}
	return currentPosition;
}
